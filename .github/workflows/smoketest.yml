name: "Test Starter Pack using KinD + kfx"
on: [pull_request, push]

jobs:
  kind:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: KinD Create Cluster
      uses: engineerd/setup-kind@v0.3.0
      with:
        name: "kfx-k8s"
        version: "v0.7.0"
        config: "kind/kind-config.yaml"
    
    - name: KinD Cluster Check
      run: |
        kubectl cluster-info
        kubectl get pods -n kube-system
    
    - name: Setup Kubeflow (using kfx)
      run: |
        chmod +x ${GITHUB_WORKSPACE}/test/kfx-smoketest.sh
        ${GITHUB_WORKSPACE}/test/kfx-smoketest.sh
        sleep 60

    - name: Setup Helm
      run: |
        wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.1.2-linux-amd64.tar.gz
        mv linux-amd64/helm ${GITHUB_WORKSPACE}/helm

    - name: Setup NFS (using Helm)
      run: |
        ${GITHUB_WORKSPACE}/helm repo add stable https://kubernetes-charts.storage.googleapis.com/
        ${GITHUB_WORKSPACE}/helm repo update

        ${GITHUB_WORKSPACE}/helm install stable/nfs-server-provisioner --set=persistence.enabled=true,persistence.storageClass=standard,persistence.size=20Gi --generate-name
        sleep 60
        kubectl get po --all-namespaces

    - name: Setup Python + Conda
      uses: actions/setup-python@v1
      with:
        python-version: 3.7
    - uses: s-weigand/setup-conda@v1

    - name: Setup Conda environment for test
      run: |
        conda create -n kubeflow-fairing python=3.7
        conda env update --prune -f=environment.yaml
        conda activate kubeflow-fairing

    - name: Run BLERSSI pipeline
      run: |
        echo "Compiling the pipeline..."
        papermill apps/networking/ble-localization/onprem/pipelines/local-BLERSSI-Pipeline-Deployment.ipynb test/build/local-output-blerssi.ipynb
        sleep 10
        echo "Executing the pipeline..."
        
        kfp -n kubeflow --endpoint http://127.0.0.1:31380/pipeline -n kubeflow run submit \
        -e "kfp-cli" \
        -r "blerssi" \
        -f blerssi.zip

    - name: Check Pipeline output
      run: |
        echo "Download the Argo binary..."
        curl -sLO https://github.com/argoproj/argo/releases/download/v2.7.2/argo-linux-amd64

        echo "Make Argo binary executable..."
        chmod +x argo-linux-amd64

        echo "Move binary to path..."
        mv ./argo-linux-amd64 ${GITHUB_WORKSPACE}/argo

        echo "Test installation..."
        ${GITHUB_WORKSPACE}/argo version

        echo "Sleep 5 minutes; wait for pipeline to finish"
        sleep 300

        echo "Get Argo workflow status"
        ${GITHUB_WORKSPACE}/argo list --all-namespaces
