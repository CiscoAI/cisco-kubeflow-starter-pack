name: "Test Starter Pack using KinD + kfx"
on: [pull_request, push]

jobs:
  kind:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@master

    - name: KinD Create Cluster
      uses: engineerd/setup-kind@v0.3.0
      with:
        name: "kfx-k8s"
        version: "v0.7.0"
        config: "kind/kind-config.yaml"
    
    - name: KinD Cluster Check
      run: |
        kubectl cluster-info
        kubectl get pods -n kube-system
    
    - name: Setup Kubeflow (using kfx)
      run: |
        chmod +x ${GITHUB_WORKSPACE}/test/kfx-smoketest.sh
        ${GITHUB_WORKSPACE}/test/kfx-smoketest.sh

    - name: Setup Helm
      run: |
        wget https://get.helm.sh/helm-v3.1.2-linux-amd64.tar.gz
        tar -zxvf helm-v3.1.2-linux-amd64.tar.gz
        mv linux-amd64/helm ${GITHUB_WORKSPACE}/helm

    - name: Setup NFS (using Helm)
      run: |
        ${GITHUB_WORKSPACE}/helm repo add stable https://kubernetes-charts.storage.googleapis.com/
        ${GITHUB_WORKSPACE}/helm repo update

        ${GITHUB_WORKSPACE}/helm install stable/nfs-server-provisioner --set=persistence.enabled=true,persistence.storageClass=standard,persistence.size=20Gi --generate-name
    
    - name: Create Notebook Server, Bootstrap starter-pack
      run: |
        echo "Create anonymous namespace..."
        kubectl create ns anonymous

        echo "Create notebook server PVC in anonymous namespace"
        kubectl create -f ${GITHUB_WORKSPACE}/test/nfs-pvc.yaml

        echo "Creating Notebook server"
        kubectl create -f ${GITHUB_WORKSPACE}/test/test-notebook-server.yaml
        sleep 60

        echo "Cloning starter-pack into the notebook"
        kubectl get po -n anonymous
        kubectl -n anonymous exec blerssi-0 --container blerssi -- git clone https://github.com/CiscoAI/cisco-kubeflow-starter-pack starter-pack

    - name: Run BLERSSI pipeline
      run: |
        echo "Executing pipeline launcher notebook"
        kubectl -n anonymous exec blerssi-0 --container blerssi -- jupyter nbconvert --to notebook --execute starter-pack/apps/networking/ble-localization/onprem/pipelines/BLERSSI-Pipeline-Deployment.ipynb
        sleep 30

    - name: Check Pipeline output
      run: |
        echo "Download the Argo binary..."
        curl -sLO https://github.com/argoproj/argo/releases/download/v2.7.2/argo-linux-amd64

        echo "Make Argo binary executable..."
        chmod +x argo-linux-amd64

        echo "Move binary to path..."
        mv ./argo-linux-amd64 ${GITHUB_WORKSPACE}/argo

        echo "Test installation..."
        ${GITHUB_WORKSPACE}/argo version

        echo "Sleep 5 minutes; wait for pipeline to finish"
        sleep 300

        echo "Get Argo workflow status"
        ${GITHUB_WORKSPACE}/argo list -n anonymous
